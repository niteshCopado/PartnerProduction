<apex:component id="CopadoMonitorDetailPage" controller="CopadoMonitorComponentController">
    <apex:stylesheet value="{!URLFOR($Resource.MonitoringResources,'lib/datatables.min.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.MonitoringResources,'lib/jQuery-3.3.1/jquery-3.3.1.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MonitoringResources,'lib/micro-template.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MonitoringResources,'lib/datatables.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MonitoringCode)}" />
    <apex:slds />

    <!-- auto refresh every a bit less than 30 min ( 30 min is the max time of each token ) -->
    <apex:form >
        <apex:actionPoller reRender="refreshToken" interval="1600" />
        <apex:outputPanel id="refreshToken">
            <script type="text/javascript">window.COPADO_TOKEN = '{!refreshToken}'; console.debug('token refreshed.');</script>
        </apex:outputPanel>
    </apex:form>
    <script type="text/javascript">
        window.COPADO_ENDPOINT = new URL(window.location).searchParams.get("e");
        window.COPADO_TOKEN = '{!refreshToken}';
        window.CORALOGIX_TOKEN = '{!coralogixToken}';
    </script>
    <script>
        // gather some common information useful for every action
        var currentURl = new URL(location.href);
        var currentData = {
            recordId: currentURl.searchParams.get('id'), // posgres record id
            jobId: currentURl.searchParams.get('jobId'),
            orgId: currentURl.searchParams.get('orgId')
        };

        function loadPageData() {
            if ("{!$CurrentPage.parameters.objectName}" === "Organization") {
                getOrganizationDetail();
            } else if ("{!$CurrentPage.parameters.objectName}" === "Job") {
                getJobDetail();
            }
        }

        $(document).ready(function () {
            console.log("user permission: {!$Permission.Monitor_Enable_Prod_Actions}");

            loadPageData();
        });

        // Contact coralogix API to retrieve the logs for a particular copadoJobId
        // In order to work, until Coralogix fixes its CORS headers, this requires
        // an extension to work in the browser: https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi
        function renderJobLogs(copadoJobId) {
            var MAX_LINES = 10000;
            var searchText = copadoJobId;
            var requestBody = {
                "size": MAX_LINES,
                "query": {
                    "bool": {
                        "must": [
                            { "query_string": {"query": JSON.stringify(searchText) } }
                        ]
                    }
                },
                "sort" : [ 'coralogix.timestamp' ]
            };
            var http = new XMLHttpRequest();
            var url = 'https://coralogix-esapi.coralogix.com:9443/*/_search';
            url = window.COPADO_ENDPOINT + '/corsproxy?url='+encodeURIComponent(url);
            http.open('POST', url, true);
            http.setRequestHeader('Content-type', 'application/json');
            http.setRequestHeader('token', window.CORALOGIX_TOKEN);
            http.setRequestHeader('Copado-Authorization', window.COPADO_TOKEN);
            http.onreadystatechange = function() {//Call a function when the state changes.
                if(http.readyState == 4 && http.status == 200) {
                    var response = JSON.parse(http.responseText);
                    var buf = [];
                    for(var i=0 ; i < response.hits.hits.length ; i++ ) {
                        var hit = response.hits.hits[i];
                        buf.push({
                            timestamp: hit._source.coralogix.timestamp,
                            app: hit._source.coralogix.metadata.applicationName,
                            dyno: hit._source.coralogix.metadata.subsystemName +'.'+ hit._source.coralogix.metadata.threadId,
                            text: hit._source.text
                        });
                    }
                    // sort it by timestamp. TODO: it can be improved
                    buf.sort(function(a, b) {
                        if (a.timestamp < b.timestamp)
                            return -1;
                        if (a.timestamp > b.timestamp)
                            return 1;
                        return 0;
                    });
                    for(var i=0 ; i < buf.length ; i++ ) {
                        buf[i] = escapeHtml([buf[i].dyno,
                            (buf[i].text||'').replace(/\[worker[a-z0-9.]+;[^;]+;[^;]+;([^\]]+)\]/g, '$1').replace(/#W DEBUG    python.refreshing.+$/g, '.')
                            ].join('; '));
                    }

                    if(buf.length) {
                        document.getElementById("jobLogs").innerHTML = buf.join('\n') + (buf.length>=MAX_LINES ? "\n<b>... over 10k log lines. The rest cannot be shown</b>" : "");
                    }else{
                        document.getElementById("jobLogs").innerHTML = '(no logs)';
                    }
                    console.info('Contacting CORALOGIX: done');
                }
            }
            console.info('Contacting CORALOGIX', url);
            http.send(JSON.stringify(requestBody));
        }

        function getJobDetail() {
            var currentURl = new URL(location.href);
            var apiParams = {};
            var endpoint = '/api/jobs/' + currentData.recordId;
            callServiceAPI(endpoint, apiParams, null, 'GET', function (jsonData) {
                document.getElementById("detailGrid").innerHTML = '';
                for (label in jsonData.record) {
                    if(label == 'id') continue;
                    var html = template('detailField', {
                        fieldLabel: label,
                        fieldValue: jsonData.record[label]
                    });
                    document.getElementById("detailGrid").innerHTML += html;
                }

                renderJobLogs(jsonData.record.copadojobid);
            });
        }

        function getOrganizationDetail() {
            console.log('calling org detail');
            var currentURl = new URL(location.href);
            var apiParams = {};
            var endpoint = '/api/organizations/' + currentData.orgId;
            callServiceAPI(endpoint, apiParams, null, 'GET', function (jsonData) {
                console.log('we have data');
                console.log(jsonData);
                document.getElementById("detailGrid").innerHTML = '';
                for (label in jsonData.record) {
                    var html = template('detailField', {
                        fieldLabel: label,
                        fieldValue: jsonData.record[label]
                    });

                    document.getElementById("detailGrid").innerHTML += html;
                }
            });
        }

        function refreshOrganization() {
            var isRefresh = confirm("Are you sure you want to use this Prod Org's cryptokey to overwrite a sandbox? you will need to enter SANDBOX 18-character OrgId next");

            if (isRefresh) {
                //refresh
                var sandboxOrgId = prompt('Enter the SANDBOX orgId:');
                var currentURl = new URL(location.href);
                var postData = {
                    "organizations": [
                        sandboxOrgId
                    ]
                };
                var productionOrgId = currentData.orgId;
                var endpoint = '/api/organizations/' + productionOrgId + '/refresh';
                callServiceAPI(endpoint, {}, postData, 'PUT', function (jsonData) {
                    successCallback('Refresh successful');
                });

            }
        }

        function setOrganizationAsBeta() {
            var isBeta = confirm("Are you sure?");

            if (isBeta) {
                //set org as beta
                var currentURl = new URL(location.href);
                var apiParams = {};
                var endpoint = '/api/organizations/' + currentData.orgId + '/beta';
                callServiceAPI(endpoint, apiParams, null, 'PUT', function (jsonData) {
                    successCallback('Org set as beta');
                });

            }
        }

        function removeOrganizationFromBeta() {
            var isBeta = confirm("Are you sure?");

            if (isBeta) {
                //remove org from beta
                var currentURl = new URL(location.href)
                var apiParams = {};
                var endpoint = '/api/organizations/' + currentData.orgId + '/beta';
                callServiceAPI(endpoint, apiParams, null, 'DELETE', function (jsonData) {
                    successCallback('Org removed from beta');
                });

            }
        }

        function successCallback(response) {
            alert(response);
            loadPageData();
        }


        // Change the status of a job only to "reset", indicating a manual change of state
        function resetJob() {
            var isReset = confirm("Are you sure?");

            if(isReset){
                //reset job
                var currentURl = new URL(location.href)
                    var apiParams = {};
                    var endpoint = '/api/jobs/' + currentData.recordId + '/reset';
                    callServiceAPI(endpoint, apiParams, null, 'PUT', function(jsonData) {
                        successCallback('Resetted job status');
                    });

            }
        }

        // notifies the job that it should end (if it is running)
        function cancelJob() {
            var isCancel = confirm("Are you sure?");

            if(isCancel){
                //cancel job
                var currentURl = new URL(location.href)
                    var apiParams = {};
                    var endpoint = '/api/jobs/' + currentData.recordId + '/cancel';
                    callServiceAPI(endpoint, apiParams, null, 'PUT', function(jsonData) {
                        successCallback('Cancelled job');
                    });

            }
        }

        function retryJob() {
            var isRetry = confirm("Are you sure?");

            if(isRetry){
                //retry job
                var currentURl = new URL(location.href)
                    var apiParams = {};
                    var endpoint = '/api/jobs/' + currentData.recordId + '/retry';
                    callServiceAPI(endpoint, apiParams, null, 'PUT', function(jsonData) {
                        successCallback('Retried job');
                    });

            }
        }

        // never run this type of job for this org
        // block_unBlock=true block, false=unBlock
        function blockJob(enableDisable) {
            var isBlock = confirm("Are you sure you want to "+ (enableDisable? 'BLOCK ANY JOB OF THIS TYPE': 'unblocked'));
            if(isBlock){
                var apiParams = {};
                var endpoint = '/api/jobs/' + currentData.recordId + '/block';
                callServiceAPI(endpoint, apiParams, null, enableDisable? 'PUT': 'DELETE', function(jsonData) {
                    successCallback('Success.');
                });
            }
        }

        // ignore stacked/waiting jobs of this type of job for this org
        // block_unBlock=true block, false=unBlock
        function ingnoreWaitingJob(enableDisable) {
            var isBlock = confirm("Are you sure you want to "+(enableDisable? 'IGNORE QUEUED JOBS': 'un-ignored-queue'));
            if(isBlock){
                var apiParams = {};
                var endpoint = '/api/jobs/' + currentData.recordId + '/ignored-queue';
                callServiceAPI(endpoint, apiParams, null, enableDisable? 'PUT': 'DELETE', function(jsonData) {
                    successCallback('Success.');
                });
            }
        }

        // use workerbig or not jobs of this type of job for this org
        // block_unBlock=true block, false=unBlock
        function addJobToWorkerbig(enableDisable) {
            var isBlock = confirm("Are you sure you want to "+(enableDisable? 'run this as WORKERBIG': 'run as regular worker'));
            if(isBlock){
                var apiParams = {};
                var endpoint = '/api/jobs/' + currentData.recordId + '/workerbig';
                callServiceAPI(endpoint, apiParams, null, enableDisable? 'PUT': 'DELETE', function(jsonData) {
                    successCallback('Success.');
                });
            }
        }

    </script>
    <div class="slds-box">
        <form>
            <div class="slds-text-title_caps">{!$CurrentPage.parameters.objectName} Details</div>
            <div class="slds-box">
                <div class="slds-form slds-form_horizontal" role="list" id="detailForm">
                    <div class="slds-grid slds-wrap" id="detailGrid">
                    </div>
                </div>
            </div>
            <apex:outputPanel rendered="{!OR(
            CONTAINS($CurrentPage.parameters.environment, 'dev'),
            CONTAINS($CurrentPage.parameters.environment, 'test'),
            AND($Permission.Monitor_Enable_Prod_Actions == true, CONTAINS($CurrentPage.parameters.environment, 'prod'))
            )}">
                <apex:outputPanel rendered="{!$CurrentPage.parameters.objectName == 'Organization'}">
                    <ul class="slds-button-group-row slds-align_absolute-center">
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="refreshOrganization();return false;">Refresh
                                Sandbox from this Prod org</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="setOrganizationAsBeta();return false;">Set
                                Org as Beta</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_destructive" onclick="removeOrganizationFromBeta();return false;">Remove
                                Org from Beta</button>
                        </li>
                    </ul>
                </apex:outputPanel>
                <apex:outputPanel rendered="{!$CurrentPage.parameters.objectName == 'Job'}">
                    <ul class="slds-button-group-row slds-align_absolute-center">
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="resetJob();" type="button">Reset</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="cancelJob();return false;">Cancel</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="retryJob();return false;">Retry</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="blockJob();return false;">Block</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="removeJobFromBlock();return false;">Remove
                                from Block</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="ignoreJob();return false;">Ignore</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="removeJobFromIgnore();return false;">Remove
                                from Ignore</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="addJobToWorkerbig();return false;">Add
                                to Workerbig</button>
                        </li>
                        <li class="slds-button-group-item">
                            <button class="slds-button slds-button_neutral" onclick="removeJobFromWorkerbig();return false;">Remove
                                from Workerbig</button>
                        </li>
                    </ul>

                    <hr/>
                    <h3>Logs (api and job)</h3>
                    <pre id="jobLogs" style="overflow-x:scroll; max-width: 1300px">
                        Loading...
                    </pre>
                </apex:outputPanel>
            </apex:outputPanel>
        </form>

    </div>

    <script type="application/x-template" id="detailField">
        <div class="slds-col slds-has-flexi-truncate slds-grid slds-size--1-of-2" role="listitem">
            <div class="slds-form-element slds-form-element_edit slds-form-element_readonly slds-hint-parent">
                <span class="slds-form-element__label"><%= fieldLabel %></span>
                <div class="slds-form-element__control">
                    <div class="slds-form-element__static"><%= fieldValue %></div>
                </div>
            </div>
        </div>

    </script>
</apex:component>